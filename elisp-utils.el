;;; elisp-utils.el ---

;; Copyright (C) 2017 Troy Pracy

;; Author: Troy Pracy
;; Keywords: elisp
;; Version: 0.1
;; Package-Requires: ((dash "2.12.1") (s "1.10.0"))

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 2 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

(require 'dash)
(require 's)


(defun elu-copy-md-sig-and-doc (&optional github)
  "Extract signature and documentation for a function/macro in markdown format.

If GITHUB is non-nil, format the signature as a link pointing to the documentation
below."
  (interactive)
  (let* ((def (sexp-at-point))
         (name (cadr def))
         (sig  (caddr def))
         (sigstr (if sig (format "%S" sig) "()"))
         (vars (seq-remove (lambda (var) (string-prefix-p "&" var))
                           (mapcar #'symbol-name sig)))
         (uppercase-vars (mapcar #'upcase vars))
         ;; TODO: handle \(fn ) macro signature at end of docstring
         (var-regexp (concat "\\(" (mapconcat #'identity uppercase-vars "\\|") "\\)"))
         (docstr (if (stringp (cadddr def)) (cadddr def) ""))
         (fragment-id (replace-regexp-in-string "[&()]" ""
                                                (replace-regexp-in-string " " "-"
                                                                          (if sig
                                                                              (format "%S-%S" name sig)
                                                                            (format "%S" name)))))
         (md-sig (if github
                     (format "* [%S](#%s) `%s`"
                             name (replace-regexp-in-string "[?!]" "" fragment-id) sigstr)
                   (format "* %S `%S`" name sig)))
         (docstr-1 (with-temp-buffer
                     (insert docstr)
                     (goto-char 0)
                     (let ((case-fold-search nil))
                       (while (re-search-forward var-regexp nil t)
                         (replace-match (format "`%s`" (downcase (match-string 0)))
                                        t nil)))
                     (buffer-string)))
         (md-def-raw (format "### %S `%s`\n\n%s" name sigstr docstr-1))
         (md-def (replace-regexp-in-string "`\\([^']+\\)'" "`\\1`" md-def-raw)))
    (kill-new md-def)
    (kill-new md-sig)))

(defun elu-github-copy-md-sig-and-doc ()
  "Extract Github signature and documentation for a function/macro in markdown format.

This is equivalent to `elu-copy-md-sig-and-doc' with a prefix argument."
  (interactive) (elu-copy-md-sig-and-doc t))

(defvar elu-test-naming-format "test-<p>unit-tests-<n>"
  "Format string for tests generated by `elu-create-test'.

The string may contain the following substitution sequences:
    <p>: package prefix (including final dash or other separator)
    <n>: function name including package prefix
    <s>: function name without package prefix
    <<>: escape sequence for <")

(defun elu--format-test-name (formatstr name)
  (let* ((prefix (car (s-match "[^-]*-" name)))
         (suffix (s-chop-prefix prefix name))
         (matches (s-match-strings-all "<[psn<]>" formatstr))
         (sections (s-split "<[psn<]>" formatstr))
         (subst_matches (mapcar (lambda (x)
                                  (cond ((string= (car x) "<p>") prefix)
                                        ((string= (car x) "<s>") suffix)
                                        ((string= (car x) "<n>") name)
                                        ((string= (car x) "<<>") "<")
                                        ))
                                matches))
         (subst_str (apply #'concat (-interleave sections subst_matches))))
    subst_str))

(defun elu-create-test ()
  "Create a corresponding `ert-deftest' call from a defun at point."
  (interactive)
  (let* ((def (sexp-at-point))
         (name (symbol-name (cadr def)))
         (testname (elu--format-test-name elu-test-naming-format name))
         (test (format "(ert-deftest %s ()\n  \"Unit tests for `%s'.\"\n  )" testname name)))
    (kill-new test)))


(provide 'elisp-utils)

;;; elisp-utils ends here
